sudo: false

git:
  submodules: false

language: cpp
dist: bionic

matrix:
  include:
    - env:
        - TYPE=Release
        - STATIC=1
        - ADDRESS=0
        - THREAD=0
        - UB=0
        - CC=clang-12
        - CXX=clang++-12
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: ['cmake', 'ninja-build', 'clang-12', 'clang++-12', 'lld-12', 'libc++-12-dev', 'libc++abi-12-dev']

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=1
        - THREAD=0
        - UB=1
        - CC=clang-12
        - CXX=clang++-12
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: ['cmake', 'ninja-build', 'clang-12', 'clang++-12', 'lld-12', 'libc++-12-dev', 'libc++abi-12-dev']

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=0
        - THREAD=1
        - UB=0
        - CC=clang-12
        - CXX=clang++-12
      os: linux
      compiler: clang
      addons:
        apt:
          sources:
            - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-12 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages: ['cmake', 'ninja-build', 'clang-12', 'clang++-12', 'lld-12', 'libc++-12-dev', 'libc++abi-12-dev']

    - env:
        - TYPE=Release
        - STATIC=1
        - ADDRESS=0
        - THREAD=0
        - UB=0
        - CC=gcc-10
        - CXX=g++-10
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages: ['cmake', 'ninja-build', 'gcc-10', 'g++-10']

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=1
        - THREAD=0
        - UB=1
        - CC=gcc-10
        - CXX=g++-10
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages: ['cmake', 'ninja-build', 'gcc-10', 'g++-10']

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=0
        - THREAD=1
        - UB=0
        - CC=gcc-10
        - CXX=g++-10
      os: linux
      compiler: gcc
      addons:
        apt:
          sources:
          - ubuntu-toolchain-r-test
          packages: ['cmake', 'ninja-build', 'gcc-10', 'g++-10']

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=1
        - THREAD=0
        - UB=1
        - CC=clang
        - CXX=clang++
      os: osx
      osx_image: xcode12.2

    - env:
        - TYPE=Release
        - STATIC=0
        - ADDRESS=0
        - THREAD=1
        - UB=0
        - CC=clang
        - CXX=clang++
      os: osx
      osx_image: xcode12.2

# the install step will take care of deploying a newer cmake version
install:
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/.ci_deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.20.2/cmake-3.20.2-linux-x86_64.tar.gz; fi
  # this is optional, but useful:
  # do a quick md5 check to ensure that the archive we downloaded did not get compromised
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then md5sum cmake-3.20.2-linux-x86_64.tar.gz; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then echo "ebc26503469f12bf1e956c564fcfa82a *cmake-3.20.2-linux-x86_64.tar.gz" > cmake_md5.txt; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then md5sum -c cmake_md5.txt; fi
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then tar -xvf cmake-3.20.2-linux-x86_64.tar.gz > /dev/null; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then mv cmake-3.20.2-linux-x86_64 cmake-install; fi
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH; fi
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}

script:
  - $CC --version
  - $CXX --version
  - mkdir build
  - cd build
  - cmake -DCMAKE_BUILD_TYPE=${TYPE} -DIHFT_STATIC_LINK=${STATIC} -DIHFT_ADDRESS_SANITIZER=${ADDRESS} -DIHFT_THREAD_SANITIZER=${THREAD} -DIHFT_UB_SANITIZER=${UB} ..
  - cmake --build .
  - ctest -R
  - ./platform_get_info
